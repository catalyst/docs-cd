---

# This playbook illustrates how to deploy and configure a docs-cd to a compute
# instance on an OpenStack based cloud.

# ============================================================================
# Play-1 : Deploy Cloud infrastructure
# ============================================================================
- name: Deploy the docs-cd compute instance on the Catalyst Cloud
  hosts: local

  tasks:
    - name: Load variables from cloud-config.yaml
      include_vars:
        dir: vars
        extensions: [yaml]

    # Connect to the Catalyst Cloud. No auth parameters are needed, because an
    # openstack.rc file is expected to be sourced.
    - name: Connect to the Catalyst Cloud
      os_auth:

    - name: Create keypair
      os_keypair:
        name: "{{ keypair_name }}"
        public_key: "{{ ssh_public_key }}"

    - name: Create a security group for docs-cd
      os_security_group:
        state: present
        name: "{{ security_group_name }}"
        description: SSH, HTTP and HTTPS access to docs-cd

    - name: Create a security rule for SSH access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ expose_ssh_to }}"

    - name: Create a security rule for HTTP access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        remote_ip_prefix: 0.0.0.0/0

    - name: Create a security rule for HTTPS access
      os_security_group_rule:
        state: present
        security_group: "{{ security_group_name }}"
        protocol: tcp
        port_range_min: 443
        port_range_max: 443
        remote_ip_prefix: 0.0.0.0/0

    - name: Create the docs-cd compute instance
      os_server:
        state: present
        name: "{{ instance_name }}"
        image: "{{ image }}"
        key_name: "{{ keypair_name }}"
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ private_network_name }}"
        security_groups: "default,{{ security_group_name }}"
      register: instance

    - name: Assign a floating IP
      os_floating_ip:
        server: "{{ instance_name }}"
        state: present
      register: floating_ip_info

    - name: ensure IP not in known_hosts
      shell: ssh-keygen -f "/home/glyndavies/.ssh/known_hosts" -R "{{ floating_ip_info.floating_ip.floating_ip_address }}"
      ignore_errors: yes

    # Add the instance as a host entry to Ansible's in memory inventory,
    - add_host: name={{ instance.server.public_v4 }}
                groups=docs_nodes
                ansible_user=ubuntu
                instance_name={{ instance.server.name }}

# ============================================================================
# Play-2  : Configure the docs-cd instance
# ============================================================================
- name: Configure the docs-cd instance
  hosts: docs_nodes
  become: yes
  gather_facts: no

  tasks:
    - name: Load variables from cloud-config.yaml
      include_vars:
        dir: vars
        extensions: [yaml]

    - name: "Wait for SSH banners"
      local_action: wait_for port=22 host={{ inventory_hostname }} search_regex=OpenSSH delay=5
      become: False

    - name: "Add cloud instance name to users local /etc/hosts"
      delegate_to: localhost
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ inventory_hostname }} {{ instance_name }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"
      when: set_local_host_entry

    - name: Update apt cache
      raw: apt update -y

    - name: Install python
      raw: >
        which python || apt-get install -y python3 && echo 'installed'
      register: python
      changed_when: python.stdout == 'installed'

    - name: make the installed python the default (Ubuntu)
      raw: >
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
      register: python-set

    - name: Upgrade all packages to the latest version
      apt:
        name: "*"
        state: latest
        update_cache: yes
        force_apt_get: yes

    - name: set timezone to UTC
      timezone:
        name: UTC

    - name: Add NZ locale to all instances
      locale_gen:
        name: en_NZ.UTF-8
        state: present

    - name: Install required system packages
      apt:
        name: "{{ item }}"
      with_items:
        - apache2
        - git
        - python-dev
        - python-pip
        - python-virtualenv
        - unattended-upgrades

    - name: enable apache rewrite mod
      apache2_module:
        state: present
        name: rewrite
      register: rewrite_enabled

    - name: remove default apache site configs
      file:
        path: "/etc/apache2/{{ item[0] }}/{{ item[1] }}"
        state: absent
      with_nested:
        - [ 'sites-enabled', 'sites-available' ]
        - [ '000-default.conf', 'default-ssl.conf' ]

    - name: remove /var/www/html
      file:
        path: /var/www/html
        state: absent

    - name: clone the docs-cd repo from GitHub
      git:
        repo: https://github.com/catalyst/docs-cd.git
        dest: "{{ docs_dir }}"
        force: yes

    - name: set docs-cd directory owner and permissions
      file:
        path: "{{ docs_dir }}"
        state: directory
        recurse: true
        owner: "{{ docs_user }}"
        group: "{{ docs_user }}"

    - name: Copy config.yaml to docs_dir
      copy:
        src: ../files/config.yaml
        dest: "{{ docs_dir }}/config.yaml"

    - name: Enable unattended security updates
      debconf:
        name: unattended-upgrades
        question: unattended-upgrades/enable_auto_updates
        value: true
        vtype: boolean

    - name: Reconfigure unattended upgrades with dpkg
      command: '/usr/sbin/dpkg-reconfigure --frontend noninteractive unattended-upgrades'

    - name: create crontab files
      file:
        path: "/var/spool/cron/crontabs/{{ item }}"
        state: touch
        owner: "{{ item }}"
        group: crontab
        mode: 0600
      with_items: "{{ crontab_users}}"

    - name: enable cron job tochecks for doc updates and compile every hour
      become: true
      lineinfile:
        path: /var/spool/cron/crontabs/ubuntu
        line: "{{ crontab_entry_docs_user }}"
        state: present
        insertafter: 'EOF'

    - name: enable cron job to updates apache config every minute, if changed
      become: true
      lineinfile:
        path: /var/spool/cron/crontabs/root
        line: "{{ crontab_entry_root_user }}"
        state: present
        insertafter: 'EOF'

    - name: add cloud_admins to ubuntu authorized_keys
      authorized_key:
        user: ubuntu
        state: present
        key: "{{item.pubkey}}"
      with_items: "{{ cloud_admins }}"

      # no reload via handler as whole server gets reboot first time around
    - name: Reboot system
      shell: sleep 2 && shutdown -r now "Ansible triggered reboot"
      async: 1
      poll: 0
      ignore_errors: true
      when: rewrite_enabled.changed == true

    - name: "Wait for SSH banners"
      local_action: wait_for port=22 host={{ inventory_hostname }} search_regex=OpenSSH delay=5
      become: False
